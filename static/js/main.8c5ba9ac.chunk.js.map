{"version":3,"sources":["layouts/Authentication/index.js","routes/GlobalRoute/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","StyleSheet","create","container","minHeight","particleContainer","backgroundColor","position","zIndex","AuthenticationLayout","props","react_default","a","createElement","className","css","particles_default","params","particles","line_linked","shadow","blur","color","enable","style","children","TempCom","SignIn","Authentication","Register","GlobalRoute","Route","exact","path","render","AppRouter","BrowserRouter","Fragment","Temp","React","Component","App","routes","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAkCMA,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,UAAW,QAEbC,kBAAmB,CACjBD,UAAW,OACXE,gBAAiB,UACjBC,SAAU,QACVC,QAAS,KAIEC,EA1Cc,SAAAC,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,YAAIf,EAAOG,YACzBQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,OAAQ,CACNC,UAAW,CACTC,YAAa,CACXC,OAAQ,CACNC,KAAM,EACNC,MAAO,UACPC,QAAQ,MAKhBC,MAAO,CACLpB,UAAW,OACXG,SAAU,QACVC,OAAQ,KACRF,gBAAiB,sBAEnBQ,UAAWC,YAAIf,EAAOK,sBAG1BM,EAAAC,EAAAC,cAAA,WAAMH,EAAMe,YCfZC,EAAU,WACd,OAAOf,EAAAC,EAAAC,cAAA,mCAGHc,EAAS,WACb,OACEhB,EAAAC,EAAAC,cAACe,EAAD,KACEjB,EAAAC,EAAAC,cAAA,0CAKAgB,EAAW,WACf,OAAOlB,EAAAC,EAAAC,cAAA,2CAGMiB,EA1BK,WAClB,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQR,IAC9Bf,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,OAAQP,IACpChB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,OAAQL,MCLtCM,mLAEF,OACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,IAAIC,OAAQJ,IACxBnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,kBAAkBC,OAAQI,aANxBC,IAAMC,WAaxBF,EAAO,WACX,OACE3B,EAAAC,EAAAC,cAAA,0CAIWsB,ICTAM,mLARX,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6B,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OAAOvB,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c5ba9ac.chunk.js","sourcesContent":["import React from \"react\";\nimport Particles from \"react-particles-js\";\nimport { css, StyleSheet } from \"aphrodite\";\n\nconst AuthenticationLayout = props => {\n  return (\n    <div className={css(styles.container)}>\n      <div>\n        <Particles\n          params={{\n            particles: {\n              line_linked: {\n                shadow: {\n                  blur: 5,\n                  color: \"#3CA9D1\",\n                  enable: true\n                }\n              }\n            }\n          }}\n          style={{\n            minHeight: \"100%\",\n            position: \"fixed\",\n            zIndex: \"-1\",\n            backgroundColor: \"rgb(248, 248, 248)\"\n          }}\n          className={css(styles.particleContainer)}\n        />\n      </div>\n      <div>{props.children}</div>\n    </div>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    minHeight: \"100%\"\n  },\n  particleContainer: {\n    minHeight: \"100%\",\n    backgroundColor: \"#f8f8f8\",\n    position: \"fixed\",\n    zIndex: -1\n  }\n});\n\nexport default AuthenticationLayout;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Authentication from \"../../layouts/Authentication\";\n\nconst GlobalRoute = () => {\n  return (\n    <div>\n      <Route exact path=\"/\" render={TempCom} />\n      <Route exact path=\"/signin\" render={SignIn} />\n      <Route exact path=\"/register\" render={Register} />\n    </div>\n  );\n};\n\nconst TempCom = () => {\n  return <div>This is a temp comp</div>;\n};\n\nconst SignIn = () => {\n  return (\n    <Authentication>\n      <div>This is the sign in route</div>\n    </Authentication>\n  );\n};\n\nconst Register = () => {\n  return <div> This is the register route</div>;\n};\n\nexport default GlobalRoute;\n","import React from 'react'\nimport { BrowserRouter, Route } from \"react-router-dom\"\nimport GlobalRoute from \"./GlobalRoute\"\n\nclass AppRouter extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <Route path=\"/\" render={GlobalRoute} />\n          <Route path=\"/authentication\" render={Temp}/>\n        </React.Fragment>\n      </BrowserRouter>\n    )\n  }\n}\n\nconst Temp = () => {\n  return (\n    <div>This is the temp component</div>\n  )\n}\n\nexport default AppRouter;","import 'ant-design-pro/dist/ant-design-pro.css';\nimport React, { Component } from 'react';\nimport AppRouter from \"./routes\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppRouter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}