{"version":3,"sources":["components/GuestHeader/GuestHeaderLogo/index.js","components/GuestHeader/Navigation/index.js","components/GuestHeader/index.js","layouts/GuestLayout/index.js","routes/GlobalRoute/GlobalRouteLanding/GlobalRouteLandingAnimatedCloud/index.js","routes/GlobalRoute/GlobalRouteLanding/index.js","layouts/AuthenticationLayout/index.js","routes/GlobalRoute/GlobalRouteRegister/index.js","routes/GlobalRoute/GlobalRouteSignIn/index.js","routes/GlobalRoute/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["GuestHeaderLogo","react_default","a","createElement","className","href","src","alt","Navigation","_ref","menu","es_menu","theme","mode","selectedKeys","style","lineHeight","map","item","key","Item","toString","Link","to","url","name","HeaderGuest","layout","Header","GuestHeader_GuestHeaderLogo","GuestHeader_Navigation","GuestLayout","props","Fragment","components_GuestHeader","children","GlobalRouteLandingAnimatedCloud","GlobalRouteLanding","layouts_GuestLayout","GlobalRouteLanding_GlobalRouteLandingAnimatedCloud","es_button","disabled","size","AuthenticationLayout","particles_default","params","particles","line_linked","shadow","blur","color","enable","minHeight","position","zIndex","backgroundColor","GlobalRouteRegister","layouts_AuthenticationLayout","GlobalRouteSignIn","GlobalRoute","Route","exact","path","render","AppRouter","BrowserRouter","Temp","React","Component","App","routes","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54c99ad2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GuestHeaderLogo.scss\";\n\nconst GuestHeaderLogo = () => (\n  <div className=\"GuestHeaderLogo\">\n    <a href=\"/\">\n      <img src=\"/logo.png\" alt=\"Logo\" />\n      <h2 className=\"hidden-xs hidden-sm\">\n        <span className=\"at\">@</span> School\n      </h2>\n    </a>\n  </div>\n);\n\nexport default GuestHeaderLogo;\n","import { Menu } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst Navigation = ({ menu }) => (\n  <Menu\n    theme=\"light\"\n    mode=\"horizontal\"\n    selectedKeys={[\"-1\"]}\n    style={{ lineHeight: \"64px\" }}\n  >\n    {menu.map((item, key) => (\n      <Menu.Item key={key.toString()}>\n        <Link to={item.url}>{item.name}</Link>\n      </Menu.Item>\n    ))}\n  </Menu>\n);\n\nNavigation.propTypes = {\n  menu: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string\n    })\n  ).isRequired\n};\n\nexport default Navigation;\n","import { Layout } from \"antd\";\nimport React from \"react\";\nimport \"./GuestHeader.scss\";\nimport GuestHeaderLogo from \"./GuestHeaderLogo\";\nimport Navigation from \"./Navigation\";\nimport PropTypes from \"prop-types\";\n\nconst HeaderGuest = ({ menu }) => (\n  <Layout.Header className=\"GuestHeader\">\n    <GuestHeaderLogo />\n    <Navigation menu={menu} />\n  </Layout.Header>\n);\n\nHeaderGuest.propTypes = {\n  menu: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    url: PropTypes.string\n  })).isRequired\n}\n\nexport default HeaderGuest;\n","import React from \"react\";\nimport GuestHeader from \"../../components/GuestHeader\";\nimport PropTypes from \"prop-types\";\n\nconst GuestLayout = props => {\n  return (\n    <React.Fragment>\n      <GuestHeader menu={props.menu} />\n      {props.children}\n    </React.Fragment>\n  );\n};\n\nGuestLayout.propTypes = {\n  menu: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string\n    })\n  ).isRequired\n};\n\nexport default GuestLayout;\n","import React from \"react\";\nimport \"./GlobalRouteLandingAnimatedCloud.scss\"\n\nconst GlobalRouteLandingAnimatedCloud = props => {\n  return (\n    <div className=\"GlobalRouteLandingAnimatedCloud\">\n      <div className=\"main-intro\">{props.children}</div>\n      <div className=\"background-wrap\">\n        <div className=\"x1\">\n          <div className=\"cloud\" />\n        </div>\n        <div className=\"x2\">\n          <div className=\"cloud\" />\n        </div>\n        <div className=\"x3\">\n          <div className=\"cloud\" />\n        </div>\n        <div className=\"x4\">\n          <div className=\"cloud\" />\n        </div>\n        <div className=\"x5\">\n          <div className=\"cloud\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalRouteLandingAnimatedCloud;\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport GuestLayout from \"../../../layouts/GuestLayout\";\nimport \"./GlobalRouteLanding.scss\";\nimport GlobalRouteLandingAnimatedCloud from \"./GlobalRouteLandingAnimatedCloud\";\n\nconst GlobalRouteLanding = () => {\n  return (\n    <GuestLayout\n      menu={[\n        { name: \"Sign In\", url: \"/signin\" },\n        { name: \"Register\", url: \"/register\" }\n      ]}\n    >\n      <div className=\"GlobalRouteLanding\">\n        <GlobalRouteLandingAnimatedCloud>\n          <div className=\"main-intro-title\">\n            The school that is on the cloud\n          </div>\n          <Button disabled={true} size=\"large\">\n            Discover more\n          </Button>\n        </GlobalRouteLandingAnimatedCloud>\n      </div>\n    </GuestLayout>\n  );\n};\n\nexport default GlobalRouteLanding;\n","import React from \"react\";\nimport Particles from \"react-particles-js\";\n\nconst AuthenticationLayout = props => {\n  return (\n    <div className=\"AuthenticationLayout\">\n      <div>\n        <Particles\n          params={{\n            particles: {\n              line_linked: {\n                shadow: {\n                  blur: 5,\n                  color: \"#3CA9D1\",\n                  enable: true\n                }\n              }\n            }\n          }}\n          style={{\n            minHeight: \"100%\",\n            position: \"fixed\",\n            zIndex: \"-1\",\n            backgroundColor: \"rgb(248, 248, 248)\"\n          }}\n          className=\"particle-container\"\n        />\n      </div>\n      <div>{props.children}</div>\n    </div>\n  );\n};\n\nexport default AuthenticationLayout;\n","import React from \"react\";\nimport AuthenticationLayout from \"../../../layouts/AuthenticationLayout\";\n\nconst GlobalRouteRegister = () => {\n  return (\n    <AuthenticationLayout>\n      <div> This is the GlobalRouteRegister route</div>\n    </AuthenticationLayout>\n  );\n};\n\nexport default GlobalRouteRegister;\n","import React from \"react\";\nimport AuthenticationLayout from \"../../../layouts/AuthenticationLayout\";\n\nconst GlobalRouteSignIn = () => {\n  return (\n    <AuthenticationLayout>\n      <div> This is the GlobalRouteSignIn route</div>\n    </AuthenticationLayout>\n  );\n};\n\nexport default GlobalRouteSignIn;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport GlobalRouteLanding from \"./GlobalRouteLanding\";\nimport GlobalRouteRegister from \"./GlobalRouteRegister\";\nimport GlobalRouteSignIn from \"./GlobalRouteSignIn\";\n\nconst GlobalRoute = () => {\n  return (\n    <div>\n      <Route exact path=\"/\" render={GlobalRouteLanding} />\n      <Route exact path=\"/signin\" render={GlobalRouteSignIn} />\n      <Route exact path=\"/register\" render={GlobalRouteRegister} />\n    </div>\n  );\n};\n\nexport default GlobalRoute;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport GlobalRoute from \"./GlobalRoute\";\n\nclass AppRouter extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <Route path=\"/\" render={GlobalRoute} />\n          <Route path=\"/authentication\" render={Temp} />\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst Temp = () => {\n  return <div>This is the temp component</div>;\n};\n\nexport default AppRouter;\n","import \"ant-design-pro/dist/ant-design-pro.css\";\nimport 'antd/dist/antd.css';\nimport React, { Component } from \"react\";\nimport AppRouter from \"./routes\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppRouter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}